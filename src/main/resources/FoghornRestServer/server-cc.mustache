
#include <foghorn/em/api/rest/generated/server/{{classname}}.h>
#include <foghorn/wire/rest.inl>

namespace foghorn {
namespace em {

namespace rest = foghorn::wire::rest;
using http_status_t = rest::http_status_t;

// -----------------------------------------------

{{classname}}::{{classname}} (Controller* controller_):
  controller(controller_) {}

void {{classname}}::add_handlers (rest::Dispatcher& rest) {
  {{#operations}}
  {{#operation}}
  rest.addHandler("{{basePathWithoutHost}}{{path}}", rest::{{httpMethod}}, this, &{{classname}}::{{operationId}});
  {{/operation}}
  {{/operations}}
}

{{#operations}}
{{#operation}}
// ----------------------------------------------
// {{operationId}}
// {{httpMethod}} "{{path}}"
//
// {{notes}}
// ----------------------------------------------
void {{classname}}::{{operationId}} (const Request& req, Response& res) {
   std::cout << "invoking {{operationId}}" << std::endl;

   {{#queryParams}}
   // {{paramName}}
   {{#isBoolean}}
   std::string {{paramName}}Str = req.get_param("{{paramName}}").empty() ?
      "{{defaultValue}}" : req.get_param("{{paramName}}");
   bool {{paramName}} = !{{paramName}}Str.compare("true");
   {{/isBoolean}}
   {{#isString}}
   std::string {{paramName}} = req.get_param("{{paramName}}").empty() ?
      "{{defaultValue}}" : req.get_param("{{paramName}}");
   {{/isString}}
   std::cout << "{{paramName}} query parameter [" << {{paramName}} << "] provided." << std::endl;

   {{/queryParams}}
   {{#pathParams}}
   // {{paramName}}
   std::string {{paramName}} = req.get_param("{{paramName}}");
   if ({{paramName}}.empty()) {
      std::cout << "Missing path param [ {{paramName}} ]\n";
      throw rest::Error("Missing path param [ {{paramName}} ]", http_status_t::bad_request);
   }
   std::cout << "{{paramName}} path parameter [" << {{paramName}} << "] provided." << std::endl;

   {{/pathParams}}
   {{#bodyParams}}
   // body param
   std::string body = req.get_body();
   std::cout << "{{operationId}} body: [" << body << "]" << std::endl;

   // Convert the body into Json.
   Json jsonBody;
   try {
      jsonBody = io::txt::from_string<Json>(body);
   } catch (std::exception& e) {
      std::cout << "Error reading request body [" << e.what() << "]" << std::endl;
      throw rest::Error(e.what(), http_status_t::bad_request);
   }
   // Construct a {{dataType}} from the Json
   {{dataType}} {{paramName}}(jsonBody);

   {{/bodyParams}}
   {{#responses}}
   {{#isDefault}}
   // Call the controller method
   {{#returnType}}{{{returnType}}} result = {{/returnType}}controller->{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
   {{#returnType}}

   // Convert the {{{returnType}}} to json and return it
   {{^containerType}}
   res.set_response(result.toJson());
   {{/containerType}}
   {{#containerType}}
   Json::array_t arr;
   for (int i = 0; i < result.size(); ++i) {
      const {{baseType}}& element = result.at(i);
      arr.push_back(element.toJson());
   }
   res.set_response(Json { std::move(arr) });
   {{/containerType}}
   {{/returnType}}
   {{^returnType}}
   res.set_empty_response();
   {{/returnType}}
   {{/isDefault}}
   {{/responses}}
}

{{/operation}}
{{/operations}}

}  // em
}  // foghorn

