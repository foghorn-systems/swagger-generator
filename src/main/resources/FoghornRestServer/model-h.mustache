#pragma once

#include <map>
#include <vector>
#include <sstream>

#include <foghorn/wire/json.h>

namespace foghorn {
namespace em {

using Json = wire::json_t;
{{#imports}}
class {{import}};
{{/imports}}
{{#models}}
{{#model}}
{{^validatorClass}}
{{#validators}}
class {{classname}}{{validatorClass}};
{{/validators}}
{{/validatorClass}}

{{#validatorClass}}
// {{classname}} is a parameter class which stores the input to a REST method.
{{/validatorClass}}
{{^validatorClass}}
// "{{classname}}" is a model class.
// It can be filled from {{#validators}}{{classname}}{{validatorClass}}, and {{/validators}}Json.
{{/validatorClass}}

class {{classname}} {
  public:
   {{classFilename}}();
  ~{{classFilename}}();
   {{classFilename}}(const {{classFilename}}& that);
   {{classFilename}}(const Json& json);
   {{classFilename}}& operator= (const {{classFilename}}& that);

   std::string toString() const;
   Json toJson() const;

   void clear();
   void copyFrom(const {{classname}}& that);
   void mergeFrom(const {{classname}}& that);
   void copyFrom(const Json& json);
   void mergeFrom(const Json& json);
   {{^validatorClass}}

   {{#validators}}
   void from{{validatorClass}}(const {{classname}}{{validatorClass}}& {{validatorParam}});
   {{/validators}}
   {{/validatorClass}}

   {{#vars}}
   // {{name}}
   {{{datatype}}} {{getter}}() const;
   void {{setter}}({{{paramType}}} {{name}});

   {{/vars}}
  private:
   {{#vars}}
   {{{fieldType}}} {{name}};
   {{/vars}}
   {{#idPrefix}}

  public:
   // This static method generates a sequence of unique ids:
   static std::string newId();
   {{/idPrefix}}
};

{{/model}}
{{/models}}
}  // em namespace
}  // foghorn namespace
