#include <foghorn/em/api/rest/rest.h>
#include <foghorn/wire/rest.inl>
#include <foghorn/em/api/rest/generated/api/{{classname}}.h>

#include <cstring>

namespace foghorn {
namespace em {

using namespace config;
namespace rest = foghorn::wire::rest;
using http_status_t = wire::rest::http_status_t;


// ---------------------------------------------------------------------------

{{classname}}::{{classname}} ({{baseName}}Controller* controller_):
controller(controller_) {}

void {{classname}}::add_handlers (rest::Dispatcher& rest) {
  {{#operations}}{{#operation}}
  rest.addHandler("{{path}}", rest::{{httpMethod}}, this, &{{classname}}::{{operationId}});
  {{/operation}}{{/operations}}
}

{{#operations}}{{#operation}}
  // ---------------------------------------------------------------------------
  // {{operationId}}
  // {{httpMethod}}
  // {{path}}
  // {{notes}}
  // ---------------------------------------------------------------------------
  void {{classname}}::{{operationId}} (const Request& req, Response& res) {

    std::cout << "invoking {{operationId}}\n";

    //query params
    {{#queryParams}}
        {{#isBoolean}}
            std::string default_{{paramName}} = "{{defaultValue}}";
            {{dataType}} {{paramName}} = (strcasecmp("true",default_{{paramName}}.c_str()) == 0);
        {{/isBoolean}}
        {{^isBoolean}}
            {{dataType}} {{paramName}} = "{{defaultValue}}";
        {{/isBoolean}}
    if (! req.get_param("{{paramName}}").empty()) {
      std::string {{paramName}}Str = req.get_param("{{paramName}}");
    {{paramName}} = {{#isBoolean}}(strcasecmp("true",{{paramName}}Str.c_str()) == 0);{{/isBoolean}}
        {{^isBoolean}}{{paramNameStr}};{{/isBoolean}}
    }
    std::cout << "{{paramName}} query parameter [" << {{paramName}} << "] provided.\n";{{/queryParams}}

    //path params
    {{#pathParams}} std::string {{paramName}};
    if (! req.get_param("{{paramName}}").empty()) {
      {{paramName}} = req.get_param("{{paramName}}");
    } else {
      std::cout << "Missing path param [ {{paramName}} ]\n";
      throw new rest::Error("Missing path param [ {{paramName}} ]", http_status_t::bad_request);
    } 
    std::cout << "{{paramName}} path parameter [" << {{paramName}} << "] provided.\n"; {{/pathParams}}

    {{#bodyParams}} //body param
    std::string body = req.get_body();
    std::cout << "{{operationId}} body: [" << body << "]\n";
    //Convert the body into Json.
    Json jsonBody;
    try {
      jsonBody = io::txt::from_string
      <Json>(body);
    } catch (std::exception& e) {
      std::cout << "Error reading request body [" << e.what() << "]\n";
      throw new rest::Error(e.what(), http_status_t::bad_request);
    }

    //Create a {{dataType}} from Json
    {{dataType}} {{paramName}};
    {{paramName}}->fromJson(jsonBody);
    {{/bodyParams}}

    {{#responses}}{{#isDefault}} // response


    {{#returnType}} {{{returnType}}} controllerRes;
    //Call into the controller
    controllerRes = controller->{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});
    //Convert the {{{dataType}}} to json and return it
    // expand is hard coded

    {{^containerType}}
        Json responseJson = controllerRes->toJson(expand);
    {{/containerType}}
    {{#containerType}}
        Json::array_t arr;
        for (int i=0; i<controllerRes.size(); ++i) {
            {{baseType}} el = controllerRes.at(i);
	        arr.push_back(el->toJson(expand));
        }
        Json responseJson { std::move(arr) };
    {{/containerType}}
    res.set_response(responseJson);
    {{/returnType}}
        {{^returnType}}
                controller->{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});
                res.set_response("");
        {{/returnType}}
    {{/isDefault}}{{/responses}}
  }
{{/operation}}{{/operations}}

}  // em
}  // foghorn