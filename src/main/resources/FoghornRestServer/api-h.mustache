#pragma once

{{#imports}}
#include <{{importRelative}}>
{{/imports}}

namespace foghorn {
namespace em {

namespace rest = foghorn::wire::rest;
using Request = foghorn::wire::rest::Request;
using Response = foghorn::wire::rest::Response;

class {{classname}} {
  public:
    class {{baseName}}Controller;
    {{classname}} ({{baseName}}Controller* controller);
    void add_handlers (rest::Dispatcher& rest);
    {{#operations}}{{#operation}}// ---------------------------------------------------------------------------
    // {{operationId}}
    // {{httpMethod}}
    // {{path}}
    // {{notes}}
    // ---------------------------------------------------------------------------
    void {{operationId}} (const Request& req, Response& res);{{/operation}}{{/operations}}
    class {{baseName}}Controller {
      public:
        {{baseName}}Controller() {}
        virtual ~{{baseName}}Controller() {}
        {{#operations}}{{#operation}}
        virtual {{^returnType}}void{{/returnType}}{{#returnType}}{{{returnType}}}{{^returnContainer}}*{{/returnContainer}}{{/returnType}} {{operationId}} ({{#allParams}}{{#isBodyParam}}{{{dataType}}}*{{/isBodyParam}} {{^isBodyParam}}const {{{dataType}}}& {{/isBodyParam}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}}) {
          throw rest::Error("Method Not Implemented", wire::rest::http_status_t::not_implemented);
        }
        {{/operation}}{{/operations}}
    };

  private:
    {{baseName}}Controller* controller;
};

}  // em
}  // foghorn
