#pragma once

#include <map>
#include <vector>
#include <sstream>

{{#imports}}
#include <foghorn/em/api/rest/generated/model/{{import}}.h>
{{/imports}}
#include <foghorn/wire/rest.h>

namespace foghorn {
namespace em {

namespace rest = foghorn::wire::rest;
using http_status_t = rest::http_status_t;
using Request = foghorn::wire::rest::Request;
using Response = foghorn::wire::rest::Response;

class {{classname}} {
  public:

    // ---------------------
    // Controller first
    // ---------------------
    class Controller {
      public:
        Controller() {}
        virtual ~Controller() {}
        {{#operations}}
	{{#operation}}
        virtual {{^returnType}}void{{/returnType}}{{{returnType}}} {{operationId}}({{#allParams}}{{#vendorExtensions.passByReference}}const {{/vendorExtensions.passByReference}}{{{dataType}}}{{#vendorExtensions.passByReference}}&{{/vendorExtensions.passByReference}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
           throw rest::Error("Method Not Implemented", http_status_t::not_implemented);
        }
        {{/operation}}
	{{/operations}}
    };
    // ---------------------

    // Autogenerated API class:
    {{classname}}(Controller* controller);
    void add_handlers(rest::Dispatcher& rest);

    {{#operations}}
    {{#operation}}
    // ----------------------------------------------
    // {{operationId}}
    // {{httpMethod}} "{{path}}"
    //
    // {{notes}}
    // ----------------------------------------------
    void {{operationId}} (const Request& req, Response& res);

    {{/operation}}
    {{/operations}}
  private:
    Controller* controller;
};

}  // em
}  // foghorn
