
#include <sstream>

{{#models}}
{{#model}}
#include <foghorn/em/api/rest/generated/model/{{classFilename}}.h>
{{#hasValidators}}
{{#validators}}
#include <foghorn/em/api/rest/generated/model/{{classname}}{{validatorClass}}.h>
{{/validators}}
{{/hasValidators}}
{{/model}}
{{/models}}
{{#imports}}
#include <foghorn/em/api/rest/generated/model/{{import}}.h>
{{/imports}}
#include <foghorn/io/txt/in_strm.inl>
#include <foghorn/io/txt/out_strm.inl>
#include <foghorn/wire/json.inl>

namespace foghorn {
namespace em {

using Json = wire::json_t;

{{#models}}
{{#model}}
// --------------------------------------------------
// {{classname}}
// --------------------------------------------------

{{classname}}::{{classname}}() { {{#hasBarePtrs}}nullPtrs(); {{/hasBarePtrs}}clear(); }
{{classname}}::{{classname}}(const {{classname}}& that) { {{#hasBarePtrs}}nullPtrs(); {{/hasBarePtrs}}copyFrom(that); }
{{classname}}::{{classname}}(const Json& json) { {{#hasBarePtrs}}nullPtrs(); {{/hasBarePtrs}}copyFrom(json); }
{{classname}}& {{classname}}::operator= (const {{classname}}& that) { copyFrom(that); return *this; }
{{classname}}::~{{classname}}() { clear(); }
{{#hasBarePtrs}}

void {{classname}}::nullPtrs() {
   {{#vars}}
   {{^isContainer}}
   {{#isRef}}
   {{name}} = nullptr;
   {{/isRef}}
   {{/isContainer}}
   {{/vars}}
}
{{/hasBarePtrs}}

// --------------------------------------------------
// clear
// --------------------------------------------------

void {{classname}}::clear() {
   {{#vars}}
   {{#isContainer}}
   {{#isRef}}
   {{^isMapContainer}}
   { for (unsigned int i = 0; i < {{name}}.size(); i++) delete {{name}}[i]; }
   {{/isMapContainer}}
   {{#isMapContainer}}
   { for(auto it = {{name}}.begin(); it != {{name}}.end(); it++) delete it->second; }
   {{/isMapContainer}}
   {{/isRef}}
   {{name}}.clear();
   {{/isContainer}}
   {{^isContainer}}
   {{#isJson}}
   {{name}} = Json {};
   {{/isJson}}
   {{^isJson}}
   {{#isRef}}
   if ({{name}} != nullptr) {
      delete {{name}};
      {{name}} = nullptr;
   }
   {{/isRef}}
   {{^isRef}}
   {{name}} = {{{defaultValue}}};
   {{/isRef}}
   {{/isJson}}
   {{/isContainer}}
   {{/vars}}
}

// --------------------------------------------------
// copyFrom or mergeFrom another {{classname}}
// --------------------------------------------------

void {{classname}}::copyFrom(const {{classname}}& that) {
   clear();
   mergeFrom(that);
}

void {{classname}}::mergeFrom(const {{classname}}& that) {
   {{#vars}}

   // {{name}}
   if (that.{{tester}}()) {
      {{#isContainer}}
      {{^isMapContainer}}
      for (unsigned int i = 0; i < that.{{name}}.size(); i++) {
         {{#items}}
         {{#isRef}}
         {{name}}.push_back(new {{datatype}}(*(that.{{name}}[i])));
         {{/isRef}}
         {{^isRef}}
         {{name}}.push_back(that.{{name}}[i]);
         {{/isRef}}
         {{/items}}
      }
      {{/isMapContainer}}
      {{#isMapContainer}}
      for(auto thatIt = that.fields.begin(); thatIt != that.fields.end(); thatIt++) {
         const std::string& key = thatIt->first;
         {{#items}}
         {{#isRef}}
         auto thisIt = {{name}}.find(key);
         if (thisIt != {{name}}.end()) {
            thisIt->second->mergeFrom(*thatIt->second);
         } else {
            {{name}}.insert(std::make_pair(key, new {{datatype}}(*thatIt->second)));
         }
         {{/isRef}}
         {{^isRef}}
         {{name}}.insert(std::make_pair(key, thatIt->second));
         {{/isRef}}
         {{/items}}
      }
      {{/isMapContainer}}
      {{/isContainer}}
      {{^isContainer}}
      {{#isRef}}
      if ({{name}} == nullptr) {
         {{name}} = new {{datatype}}(*(that.{{name}}));
      } else {
         {{name}}->copyFrom(*(that.{{name}}));
      }
      {{/isRef}}
      {{^isRef}}
      {{name}} = that.{{name}};
      {{/isRef}}
      {{/isContainer}}
   }
   {{/vars}}
}

// --------------------------------------------------
// copyFrom or mergeFrom Json
// --------------------------------------------------

void {{classname}}::copyFrom(const Json& j) {
   clear();
   mergeFrom(j);
}

void {{classname}}::mergeFrom(const Json& j) {
   if (j.get_kind() != Json::object) {
      throw std::runtime_error("{{classname}} body was not an object");
   }
   const Json::object_t& jobj = j.as<Json::object_t>();
   {{#vars}}

   // {{name}}
   { auto iterator = jobj.find("{{name}}");
     if (iterator != jobj.end()) {
	const Json& json = iterator->second;
        if (json.get_kind() != Json::null) {
           {{#isContainer}}
           {{^isMapContainer}}
           if (json.get_kind() != Json::array) {
              throw std::runtime_error("{{classname}} property {{name}} was not an array");
           }
           const Json::array_t& array = json.as<Json::array_t>();
           for (unsigned int i = 0; i < array.size(); i++) {
              const Json& itemJson = array[i];
              {{#items}}
              {{#isJson}}
              {{name}}.push_back(itemJson);
              {{/isJson}}
              {{^isJson}}
              {{#isRef}}
              {{name}}.push_back(new {{datatype}}(itemJson));
              {{/isRef}}
              {{^isRef}}
              if (itemJson.get_kind() != Json::{{jsonType}}) {
                 throw std::runtime_error("{{classname}} property {{name}} item was not {{jsonType}}");
              }
              {{name}}.push_back(itemJson.as<Json::{{jsonType}}_t>());
              {{/isRef}}
              {{/isJson}}
              {{/items}}
           }
           {{/isMapContainer}}
           {{#isMapContainer}}
           if (json.get_kind() != Json::object) {
              throw std::runtime_error("{{classname}} property {{name}} was not an object");
           }
           const Json::object_t& map = json.as<Json::object_t>();
           for (auto it = map.begin(); it != map.end(); it++) {
              const std::string& key = it->first;
              const Json& valueJson = it->second;
              {{#items}}
              {{#isJson}}
              {{name}}.insert(std::make_pair(key, valueJson));
              {{/isJson}}
              {{^isJson}}
              {{#isRef}}
              auto thisIterator = {{name}}.find(key);
              if (thisIterator != {{name}}.end()) {
                 thisIterator->second->mergeFrom(valueJson);
              } else {
                 {{name}}.insert(std::make_pair(key, new {{datatype}}(valueJson)));
              }
              {{/isRef}}
              {{^isRef}}
              if (itemJson.get_kind() != Json::{{jsonType}}) {
                 throw std::runtime_error("{{classname}} property {{name}} item was not {{jsonType}}");
              }
              {{name}}.insert(std::make_pair(key, it->second));
              {{/isRef}}
              {{/isJson}}
              {{/items}}
           }
           {{/isMapContainer}}
           {{/isContainer}}
           {{^isContainer}}
           {{#isJson}}
           {{name}} = json;
           {{/isJson}}
           {{^isJson}}
           {{#isRef}}
           if ({{name}} == nullptr) {
              {{name}} = new {{datatype}}(json);
           } else {
              {{name}}->copyFrom(json);
           }
           {{/isRef}}
           {{^isRef}}
           if (json.get_kind() != Json::{{jsonType}}) {
              throw std::runtime_error("{{classname}} property {{name}} was not {{jsonType}}");
           }
           {{name}} = json.as<Json::{{jsonType}}_t>();
           {{/isRef}}
           {{/isJson}}
           {{/isContainer}}
	}
     }
   }
   {{/vars}}
}

// --------------------------------------------------
// toJson or string
// --------------------------------------------------

std::string {{classname}}::toString() const {
   return io::txt::to_string(toJson());
}

Json {{classname}}::toJson() const {
   Json::object_t info;
   {{#vars}}

   // {{name}}
   if ({{tester}}()) {
      {{#isContainer}}
      {{^isMapContainer}}
      Json::array_t arr;
      for (unsigned int i = 0; i < {{name}}.size(); i++) {
         {{#items}}
         {{fieldType}} item = {{name}}[i];
         {{#isJson}}
	 arr.push_back(item);
         {{/isJson}}
         {{^isJson}}
         {{#isRef}}
         arr.push_back(item->toJson());
         {{/isRef}}
         {{^isRef}}
         {{#isString}}
         arr.push_back(Json { std::move(item) });
         {{/isString}}
         {{^isString}}
         arr.push_back(Json { item });
         {{/isString}}
         {{/isRef}}
         {{/isJson}}
         {{/items}}
      }
      info["{{name}}"] = Json{ std::move(arr) };
      {{/isMapContainer}}
      {{#isMapContainer}}
      Json::object_t obj;
      for(auto it = {{name}}.begin(); it != {{name}}.end(); it++) {
         {{#items}}
	 {{fieldType}} item = it->second;
         {{#isJson}}
         obj.insert(std::make_pair(it->first, item));
         {{/isJson}}
         {{^isJson}}
         {{#isRef}}
         obj.insert(std::make_pair(it->first, item->toJson()));
         {{/isRef}}
         {{^isRef}}
         {{#isString}}
         obj.insert(std::make_pair(it->first, Json { std::move(item) }));
         {{/isString}}
         {{^isString}}
         obj.insert(std::make_pair(it->first, Json { item }));
         {{/isString}}
         {{/isRef}}
         {{/isJson}}
         {{/items}}
      }
      info["{{name}}"] = Json{ std::move(obj) };
      {{/isMapContainer}}
      {{/isContainer}}
      {{^isContainer}}
      {{#isJson}}
      info["{{name}}"] = {{name}};
      {{/isJson}}
      {{^isJson}}
      {{#isRef}}
      info["{{name}}"] = {{name}}->toJson();
      {{/isRef}}
      {{^isRef}}
      {{#isString}}
      info["{{name}}"] = Json{ std::string({{name}}) };
      {{/isString}}
      {{^isString}}
      info["{{name}}"] = Json{ {{name}} };
      {{/isString}}
      {{/isRef}}
      {{/isJson}}
      {{/isContainer}}
   }
   {{/vars}}

   return Json{ std::move(info) };
}

void {{classname}}::throwIfMissingRequiredFields() const {
  {{#vars}}
  {{#required}}
  if (!{{tester}}()) {
    throw std::runtime_error("{{classname}} missing required property \"{{name}}\"");
  }
  {{/required}}
  {{/vars}}
}
{{#hasValidators}}

// --------------------------------------------------
// validators
// --------------------------------------------------
{{#validators}}

void {{classname}}::from{{validatorClass}}(const {{classname}}{{validatorClass}}& {{validatorParam}}) {
   {{#validatorVars}}
   {{setter}}({{validatorParam}}.{{getter}}());
   {{/validatorVars}}
   {{^validatorVars}}
   // No fields to set
   {{/validatorVars}}
}
{{/validators}}
{{/hasValidators}}

// --------------------------------------------------
// setters/getters/testers
// --------------------------------------------------
{{#vars}}

// {{name}}
bool {{classname}}::{{tester}}() const {
   {{#isContainer}}
   return !{{name}}.empty();
   {{/isContainer}}
   {{^isContainer}}
   {{#isJson}}
   return {{name}}.get_kind() != Json::null;
   {{/isJson}}
   {{^isJson}}
   {{#isRef}}
   return {{name}} != nullptr;
   {{/isRef}}
   {{^isRef}}
   {{#isString}}
   return {{name}}.compare({{{defaultValue}}});
   {{/isString}}
   {{^isString}}
   return {{name}} != {{{defaultValue}}};
   {{/isString}}
   {{/isRef}}
   {{/isJson}}
   {{/isContainer}}
}
{{{datatype}}} {{classname}}::{{getter}}() const {
   {{#isRef}}
   {{^isContainer}}
   return ({{name}} != nullptr) ? *{{name}} : {{datatype}}();
   {{/isContainer}}
   {{#isContainer}}
   {{{datatype}}} result;
   {{^isMapContainer}}
   for (unsigned int i = 0; i < {{name}}.size(); i++) {
      result.push_back(*({{name}}[i]));
   }
   {{/isMapContainer}}
   {{#isMapContainer}}
   for(auto it = {{name}}.begin(); it != {{name}}.end(); it++) {
      result.insert(std::make_pair(it->first, *(it->second)));
   }
   {{/isMapContainer}}
   return result;
   {{/isContainer}}
   {{/isRef}}
   {{^isRef}}
   return {{name}};
   {{/isRef}}
}
{{classname}}& {{classname}}::{{setter}}({{{paramType}}} {{name}}_) {
   {{#isRef}}
   {{^isContainer}}
   if ({{name}} == nullptr) {
      {{name}} = new {{{datatype}}}({{name}}_);
   } else {
      {{name}}->copyFrom({{name}}_);
   }
   {{/isContainer}}
   {{#isContainer}}
   {{^isMapContainer}}
   { for (unsigned int i = 0; i < {{name}}.size(); i++) delete {{name}}[i]; }
   {{/isMapContainer}}
   {{#isMapContainer}}
   { for(auto it = {{name}}.begin(); it != {{name}}.end(); it++) delete it->second; }
   {{/isMapContainer}}
   {{name}}.clear();
   {{^isMapContainer}}
   { for (unsigned int i = 0; i < {{name}}_.size(); i++) {
        {{#items}}
        {{name}}.push_back(new {{datatype}}({{name}}_[i]));
        {{/items}}
   }}
   {{/isMapContainer}}
   {{#isMapContainer}}
   { for(auto it = {{name}}_.begin(); it != {{name}}_.end(); it++) {
        {{#items}}
        {{name}}.insert(std::make_pair(it->first, new {{datatype}}(it->second)));
        {{/items}}
   }}
   {{/isMapContainer}}
   {{/isContainer}}
   {{/isRef}}
   {{^isRef}}
   {{name}} = {{name}}_;
   {{/isRef}}
   return *this;
}
{{/vars}}

{{/model}}
{{/models}}
}  // em namespace
}  // foghorn namespace

